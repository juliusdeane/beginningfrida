/*
 * Auto-generated by Frida. Please modify to match the signature of sem_getvalue.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call sem_getvalue.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
      var sem_item = args[0]; // sem_t *sem
      var sem_value_reference = args[1]; // int *s_val <- by reference, remember.
      var pointer_read = sem_value_reference.readPointer();
      var pointer_value = sem_value_reference.readInt();

      log(`[onEnter] sem_getvalue(sem=${sem_item}, sval=${sem_value_reference})`);
      log("[onEnter] pointer_read = " + pointer_read);
      log("[onEnter] pointer_value = " + pointer_value);
      log("------------------------");

      this.pointer_to_sem_value = sem_value_reference;
  },

  /**
   * Called synchronously when about to return from sem_getvalue.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
      var sem_value_reference = this.pointer_to_sem_value;
      var pointer_read = sem_value_reference.readPointer();
      var pointer_value = sem_value_reference.readInt();
      var new_value = 31337;

      log("[onLeave] retval: " + retval);
      log("[onLeave] Here sem_value pointer: " + this.pointer_to_sem_value);

      log("[onLeave] pointer_read = " + pointer_read);
      log("[onLeave] pointer_value = " + pointer_value);

      log("----- going to change here -----");
      sem_value_reference.writeU32(new_value);
      sem_value_reference.writeS32(new_value);
      sem_value_reference.writeInt(new_value);
      log("    * CHANGED TO: " + new_value);
  }
}
